@layout FullPage
@page "/"
@inject IJSRuntime JS;
@inject IImageService imgService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="map-container">
    <div id="map"></div>
</div>

<div class="footer">
    <div class="container">
        <div class="row">
            <div class="col-md-8 col-12 offset-md-2">
                <CascadingValue Value="@SelectedDateIndex">
                    <TimeLine Dates=@Dates class="mb-2" OnSelectedDateIndexChanged="OnSelectedDateChanged"></TimeLine>
                </CascadingValue>
            </div>
        </div>
    </div>
</div>

<ImageModal @ref="@Imagemodal" Image="@SelectedImage"></ImageModal>

@if (IsFirstModalVisibile)
{
    <FirstModal @ref="@FirstModal" OnCloseCallback="@CloseFirstModal"></FirstModal>
}


@code {
    /*
    * Proprietà
    */
    private List<string> Dates = new List<string>() { "Test", "1944", "1957", "1980", "2000" };

    private int SelectedDateIndex { get; set; }

    private ImageModal Imagemodal { get; set; }
    private FirstModal FirstModal { get; set; }
    private bool IsFirstModalVisibile { get; set; }

    private ImageData SelectedImage { get; set; } = new ImageData();

    private static Action<int> action;

    IJSObjectReference module;

    /*
    * Metodi
    */

    async Task OnSelectedDateChanged(int index)
    {
        SelectedDateIndex = index;
        StateHasChanged();

        switch (Dates[index])
        {
            case "Test":
                await module.InvokeVoidAsync("InitializeTestMap");
                break;
            case "1980":
                await module.InvokeVoidAsync("Initialize1980Map");
                break;
            default:
                await module.InvokeVoidAsync("InitializeTestMap");
                break;
        }

    }

    protected override async void OnInitialized()
    {
        //Handle JS 
        module = await JS
        .InvokeAsync<IJSObjectReference>("import", "./js/test.js");

        await module.InvokeVoidAsync("InitializeTestMap");
        //Assegna static action alla chiamata per aprire il modal
        action = CallTestModal;

        //Handle modal di introduzione
        var firstModalRememberMeIsPresent = await localStorage.ContainKeyAsync("FirstAccess");
        IsFirstModalVisibile = !firstModalRememberMeIsPresent;
    }

    protected async Task CloseFirstModal(bool rememberMe)
    {
        //Salva in localstorage in modo da non visualizzarlo ogni volta se richiesto
        if (rememberMe)
            await localStorage.SetItemAsync("FirstAccess", true);

        IsFirstModalVisibile = false;
    }


    [JSInvokable]
    public static void UpdateMessageCaller(int selectedIndex)
    {
        action.Invoke(selectedIndex);
    }


    protected void CallTestModal(int index)
    {
        SelectedImage = imgService.Immagini[index];
        StateHasChanged();
        Imagemodal.Open();
    }
}

<style>
    .map-container {
        height: 85vh;
        position: relative;
    }

#map {
position: absolute;
top: 0;
left: 0;
width: 100%;
height: 100%;
    }

    .footer {
        margin-top: 25px;
    height: 50px;
    }
</style>